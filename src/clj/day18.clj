(ns clj.day18)

(def input "#################################################################################
#.....#.............................#...#k......#.........#....h........#.....#.#
###.#.#####.#.#####################.###.#.#.#####.###.#####.#####.#####.#.###.#.#
#...#.....#.#.#...#.............#.#...#.#.#.....#...#.#.....#.M...#...#.#...#...#
#.#######.###.#.###.###.#######.#.###.#.#.#####.###.#.#.#####.#####.#.#.###.#####
#...#...#.....#.......#.#...#.#...#.#.#.#...#i#.....#.#...#.#.......#.#.....#...#
###G#.#.#####.#######.#.#.#.#.###.#.#.#.###.#.#######.###.#.#########.#####.#.#.#
#...#.#.#.....#...#...#...#.#.....#.#...#.#.#.....#.....#.#...B...#.#...#...#.#.#
#.#####.#.#####.#.###.#####.#####.#.###.#.#.#####.#.#####.#.#####.#.###.#.###.#.#
#.....#.......#.#...#..c#.#.#...#...#...#.#....r..#.......#...#..l#...#.#.#...#.#
#.###.#########.###.###.#.#.#.#.#####.###.#######.#########.#.###.###.#.###.###.#
#...#.............#.#.#.#.#.#.#.....#...#.......#...#.....#.#...#.....#.....O.#.#
#.#####.###########.#.#.#.#.#.#####.###.#L###.#####.#.###.#####X#####.#########.#
#.#...#.#.....#.....#...#.#.....#.....#.#...#.....#...#.#.....#...#.......#j....#
#.#.#.#.###.###.#####.###.#######.###.#.###.###.#######.#####.###.#.#######.#####
#.#.#.#.....#...#...#.#.......#...#...#.#...#...#...........#...#.#..p#.....#...#
###.#.#####.#.#####.#.#.#######.###.###.#.###.#.#.#########.###.#.###.#.#####.#.#
#...#.....#.#.....#.#.#.......#.#.....#.#.#.#.#.#...#.....#...#.#...#.#.......#.#
#.#######.#######.#.#.#######.#.#######.#P#.#.#####.#.###.#.###.#.#.#######.###.#
#.#.............#.#.......#...#.......#.#...#.......#.#.#.#.....#.#.#.....#.#.#.#
#D#############.#.#######.#.#########.#.#############.#.#.#####.###.#.###.#.#.#.#
#...#.......#.....#...#.#.#.........#...#.............#.#.....#.....#.#...#...#.#
###.#.#####.#######.###.#.###.#.###.#####.#############.#############.#.#######.#
#.#...#...#b........#...#...#.#...#...#.#.#...............#...........#.......#.#
#.#####.#############.#####.#####.###.#.#.#############.#.#####.#############.#.#
#.#.......#.....#.....#.....#...#.#...#.#.....#.........#.....#.#.....#u....#...#
#.#.#####.#.###.#.###.#.#####.#.#.#.###.#####.#.#############.#.#.###.#####.###.#
#.#.#.....#...#.#...#.#.#.....#...#...#.#...#.#...#.........#.#.....#.....#.#...#
#.#.#.#######.#.#.###.#.###.#.#######.#.#.#.#.#.#.#.#######.#.#####.#####.#S#.###
#.#.#.#.....#.#.#.#...#...#.#...#....f..#.#...#.#.#.....#...#.....#.....#.#.....#
#.#.#.#.###.#.#.#.#.#####.#####.#########.#######.#####.#########.#####.#.#####.#
#.#.#.....#.#.#.#.#.....#.....#.........#.#.......#.....#.........#.#...#.....#.#
#.#.#######.#.#.#Q#####.#####.#.#######.#.#.#.#####.#####.#########.#.#####.#F#.#
#.#.#...#...#.#.....#.....#...#.....#...#.#.#.#.....#.....#...#.......#.T.#q#.#.#
#.#.###.#.#.#.#######.###.#.#######.#.#.#.###.#.###.#.#######.#.#######.#.###.#.#
#.#...#.#.#.#.Z.#.....#...#.#.....#.#.#.#.....#...#.#.......#.......#...#...#.#.#
#.###.#.#.#####.#.#########.#.###.###.#.###########.#######.#######.#.#####.#.#.#
#..o#.#.#.......#.........#...#...#...#.#.#...............#.......#.#...#.#.#.#.#
#.#.#.#.#################.#####.###.###.#.#.###.#################.#####.#.#.#.#.#
#.#.J...................#...........#.........#.........V......n........#.....#.#
#######################################.@.#######################################
#...#.........#.........#.#...............#...........#.......#...#.....#.......#
#.###.#####.#.#.#######.#.#.#.#########.#.#.#######.#.#####.#.#.#.###.#.###.#.###
#...#.#.....#.#.#.N.#.....#v#.#.........#.#...#.#...#...#...#...#.....#...#.#e..#
#.#.#.#U#####.#.#.#.#######.#.#####.#####.###.#.#.#####.#.###############.###.#.#
#.#...#...#.#.#...#.#.......#.....#.....#.#.....#.#.....#.#.#.....#.....#z..#.#.#
#.#######.#.#.#.###.#.#########.#.#######.#.#####.#.#####.#.#.#.###.#.#####.###.#
#.......#.#...#t..#...#...#...#.#.......#.#.#.#...#.......#...#...#.#.....#.....#
#######.#.###.###.#######.#.#.#.#######.#.#.#.#.###########.#####.#.#####.#####.#
#.......#...#.#...#.......#.#.#.....#...#.#...#.........#...#...#.#.#...#.....#.#
###########.#.#.###.#######.#.#######.#.#.###.#####.###.###.#.#.#.#.#.#.###.###.#
#...........#.#...#.......#.#...#...#.#.#.....#...#.#.#...#.#.#.#.....#.#.#.#...#
#.###########.###.#######.#.###.#.#.#.#.#.#####.#.#.#.###.###.#.#######.#.#.#.###
#.#...#...#.#..s#.#.....#.#.#...#.#...#.#.#...#.#.#.....#.....#.......#.#.#...#w#
#.#.#.#.#.#E###.#.#.###.#.#.###.#.#####.###.#.#.#.###########.#######.#.#.#####.#
#.#.#...#.#.....#.#.#.#...#...#...#...#.#...#...#...........#.#...#...#.....#...#
#.#.#####.#.#####.#.#.###.###.#######.#.#.#################.###.#.#.#######.#.#.#
#...#.....#.#.......#.......#...#.....#.#.#...#.........#.......#...#.....#.#.#.#
#.###.#####.#.#################.#.#.###.#.#.#.#.###.#.###.###########.###.#.#.###
#.#.#.....#.#.#...............#.#.#.....#...#.#...#.#.#...#...........#...#.#...#
#.#.#####.#.###.#.###########.#.#.###########.###.#.###.###.###.#######.###.###Y#
#...#...#.#...#.#.#...#.....#...#...#...#.....#...#.....#...#.#...#.....#...#...#
###.###.#.###.#.#.#.#######.#######.###.#.###########.###.###.#####.#####.###.###
#..a#...#.#.#.#.#.#.#.....#.....#...#...#...#.......#.#.#...#......d#.....#.....#
#.###.#.#.#.#.#.#.#.###.#.#.###.#.###.###.#.#.#####.#.#.###.#########.#######.#.#
#.#...#.#.#.#...#.#..x..#.#...#.#...#...#.#.......#.#.....#.......#.#.#.....#.#.#
#.#.#####.#.#####.#######.###.#.###.###.#.#########.###.#########.#.#.#.###.###.#
#...#...#.#...#.......#...#...#...#.#...#.#...#.....#...#.......#.#...#.#.#.....#
#####.#.#.#.#.#.#######.###.#######.#.###.###.#.#########.###.#.#.###.#.#.#####.#
#.....#...#.#.....#.....#.#.......#.#...#...#.#.........#...#.#.#...#.#.#.......#
#.#########.#######.#####.#.#####.#.###.###.#.#########.###.#.#####.#.#.#####.###
#.....#.......#.I...#.C...#.#...#...#...#.#...#.......#.....#.#...#.#.#.....#...#
#.###.#########.#######.#.#.#.#.#####.#.#.###.#.#.###.#######.#.#.#.#.#####.###.#
#...#...#...W.#...#...#.#.....#.#.....#.#.....#.#...#...#.....#.#.#.#.....#...#.#
#.#####.#.###.###.#.#R#########.###.###.#.#########.###.#.#####.#.#.#####.#.#.###
#.#.....#.#.#...#...#.....#...#.#...#.#.#...#...#...#...#.H.#...#...#.#...#.#...#
#.#.#####.#.#.###########.#.###.#.###.#.###.#.#.#.###.#####.#.#######.#.#######.#
#y#.....#.#.#...K.........#...#...#...#.#.#...#.#.#.#.#...#g#.....#...#...#...#.#
#.#####.#.#.###############.#.#####.###.#.#####.#.#.#.#.#.#.#####.#.#.###.#.#.#.#
#.....#...#.................#...........#........m#.....#.#.......#.#.....A.#...#
#################################################################################
")

(def input-part2 "#################################################################################
#.....#.............................#...#k......#.........#....h........#.....#.#
###.#.#####.#.#####################.###.#.#.#####.###.#####.#####.#####.#.###.#.#
#...#.....#.#.#...#.............#.#...#.#.#.....#...#.#.....#.M...#...#.#...#...#
#.#######.###.#.###.###.#######.#.###.#.#.#####.###.#.#.#####.#####.#.#.###.#####
#...#...#.....#.......#.#...#.#...#.#.#.#...#i#.....#.#...#.#.......#.#.....#...#
###G#.#.#####.#######.#.#.#.#.###.#.#.#.###.#.#######.###.#.#########.#####.#.#.#
#...#.#.#.....#...#...#...#.#.....#.#...#.#.#.....#.....#.#...B...#.#...#...#.#.#
#.#####.#.#####.#.###.#####.#####.#.###.#.#.#####.#.#####.#.#####.#.###.#.###.#.#
#.....#.......#.#...#..c#.#.#...#...#...#.#....r..#.......#...#..l#...#.#.#...#.#
#.###.#########.###.###.#.#.#.#.#####.###.#######.#########.#.###.###.#.###.###.#
#...#.............#.#.#.#.#.#.#.....#...#.......#...#.....#.#...#.....#.....O.#.#
#.#####.###########.#.#.#.#.#.#####.###.#L###.#####.#.###.#####X#####.#########.#
#.#...#.#.....#.....#...#.#.....#.....#.#...#.....#...#.#.....#...#.......#j....#
#.#.#.#.###.###.#####.###.#######.###.#.###.###.#######.#####.###.#.#######.#####
#.#.#.#.....#...#...#.#.......#...#...#.#...#...#...........#...#.#..p#.....#...#
###.#.#####.#.#####.#.#.#######.###.###.#.###.#.#.#########.###.#.###.#.#####.#.#
#...#.....#.#.....#.#.#.......#.#.....#.#.#.#.#.#...#.....#...#.#...#.#.......#.#
#.#######.#######.#.#.#######.#.#######.#P#.#.#####.#.###.#.###.#.#.#######.###.#
#.#.............#.#.......#...#.......#.#...#.......#.#.#.#.....#.#.#.....#.#.#.#
#D#############.#.#######.#.#########.#.#############.#.#.#####.###.#.###.#.#.#.#
#...#.......#.....#...#.#.#.........#...#.............#.#.....#.....#.#...#...#.#
###.#.#####.#######.###.#.###.#.###.#####.#############.#############.#.#######.#
#.#...#...#b........#...#...#.#...#...#.#.#...............#...........#.......#.#
#.#####.#############.#####.#####.###.#.#.#############.#.#####.#############.#.#
#.#.......#.....#.....#.....#...#.#...#.#.....#.........#.....#.#.....#u....#...#
#.#.#####.#.###.#.###.#.#####.#.#.#.###.#####.#.#############.#.#.###.#####.###.#
#.#.#.....#...#.#...#.#.#.....#...#...#.#...#.#...#.........#.#.....#.....#.#...#
#.#.#.#######.#.#.###.#.###.#.#######.#.#.#.#.#.#.#.#######.#.#####.#####.#S#.###
#.#.#.#.....#.#.#.#...#...#.#...#....f..#.#...#.#.#.....#...#.....#.....#.#.....#
#.#.#.#.###.#.#.#.#.#####.#####.#########.#######.#####.#########.#####.#.#####.#
#.#.#.....#.#.#.#.#.....#.....#.........#.#.......#.....#.........#.#...#.....#.#
#.#.#######.#.#.#Q#####.#####.#.#######.#.#.#.#####.#####.#########.#.#####.#F#.#
#.#.#...#...#.#.....#.....#...#.....#...#.#.#.#.....#.....#...#.......#.T.#q#.#.#
#.#.###.#.#.#.#######.###.#.#######.#.#.#.###.#.###.#.#######.#.#######.#.###.#.#
#.#...#.#.#.#.Z.#.....#...#.#.....#.#.#.#.....#...#.#.......#.......#...#...#.#.#
#.###.#.#.#####.#.#########.#.###.###.#.###########.#######.#######.#.#####.#.#.#
#..o#.#.#.......#.........#...#...#...#.#.#...............#.......#.#...#.#.#.#.#
#.#.#.#.#################.#####.###.###.#.#.###.#################.#####.#.#.#.#.#
#.#.J...................#...........#..@#@....#.........V......n........#.....#.#
#################################################################################
#...#.........#.........#.#............@#@#...........#.......#...#.....#.......#
#.###.#####.#.#.#######.#.#.#.#########.#.#.#######.#.#####.#.#.#.###.#.###.#.###
#...#.#.....#.#.#.N.#.....#v#.#.........#.#...#.#...#...#...#...#.....#...#.#e..#
#.#.#.#U#####.#.#.#.#######.#.#####.#####.###.#.#.#####.#.###############.###.#.#
#.#...#...#.#.#...#.#.......#.....#.....#.#.....#.#.....#.#.#.....#.....#z..#.#.#
#.#######.#.#.#.###.#.#########.#.#######.#.#####.#.#####.#.#.#.###.#.#####.###.#
#.......#.#...#t..#...#...#...#.#.......#.#.#.#...#.......#...#...#.#.....#.....#
#######.#.###.###.#######.#.#.#.#######.#.#.#.#.###########.#####.#.#####.#####.#
#.......#...#.#...#.......#.#.#.....#...#.#...#.........#...#...#.#.#...#.....#.#
###########.#.#.###.#######.#.#######.#.#.###.#####.###.###.#.#.#.#.#.#.###.###.#
#...........#.#...#.......#.#...#...#.#.#.....#...#.#.#...#.#.#.#.....#.#.#.#...#
#.###########.###.#######.#.###.#.#.#.#.#.#####.#.#.#.###.###.#.#######.#.#.#.###
#.#...#...#.#..s#.#.....#.#.#...#.#...#.#.#...#.#.#.....#.....#.......#.#.#...#w#
#.#.#.#.#.#E###.#.#.###.#.#.###.#.#####.###.#.#.#.###########.#######.#.#.#####.#
#.#.#...#.#.....#.#.#.#...#...#...#...#.#...#...#...........#.#...#...#.....#...#
#.#.#####.#.#####.#.#.###.###.#######.#.#.#################.###.#.#.#######.#.#.#
#...#.....#.#.......#.......#...#.....#.#.#...#.........#.......#...#.....#.#.#.#
#.###.#####.#.#################.#.#.###.#.#.#.#.###.#.###.###########.###.#.#.###
#.#.#.....#.#.#...............#.#.#.....#...#.#...#.#.#...#...........#...#.#...#
#.#.#####.#.###.#.###########.#.#.###########.###.#.###.###.###.#######.###.###Y#
#...#...#.#...#.#.#...#.....#...#...#...#.....#...#.....#...#.#...#.....#...#...#
###.###.#.###.#.#.#.#######.#######.###.#.###########.###.###.#####.#####.###.###
#..a#...#.#.#.#.#.#.#.....#.....#...#...#...#.......#.#.#...#......d#.....#.....#
#.###.#.#.#.#.#.#.#.###.#.#.###.#.###.###.#.#.#####.#.#.###.#########.#######.#.#
#.#...#.#.#.#...#.#..x..#.#...#.#...#...#.#.......#.#.....#.......#.#.#.....#.#.#
#.#.#####.#.#####.#######.###.#.###.###.#.#########.###.#########.#.#.#.###.###.#
#...#...#.#...#.......#...#...#...#.#...#.#...#.....#...#.......#.#...#.#.#.....#
#####.#.#.#.#.#.#######.###.#######.#.###.###.#.#########.###.#.#.###.#.#.#####.#
#.....#...#.#.....#.....#.#.......#.#...#...#.#.........#...#.#.#...#.#.#.......#
#.#########.#######.#####.#.#####.#.###.###.#.#########.###.#.#####.#.#.#####.###
#.....#.......#.I...#.C...#.#...#...#...#.#...#.......#.....#.#...#.#.#.....#...#
#.###.#########.#######.#.#.#.#.#####.#.#.###.#.#.###.#######.#.#.#.#.#####.###.#
#...#...#...W.#...#...#.#.....#.#.....#.#.....#.#...#...#.....#.#.#.#.....#...#.#
#.#####.#.###.###.#.#R#########.###.###.#.#########.###.#.#####.#.#.#####.#.#.###
#.#.....#.#.#...#...#.....#...#.#...#.#.#...#...#...#...#.H.#...#...#.#...#.#...#
#.#.#####.#.#.###########.#.###.#.###.#.###.#.#.#.###.#####.#.#######.#.#######.#
#y#.....#.#.#...K.........#...#...#...#.#.#...#.#.#.#.#...#g#.....#...#...#...#.#
#.#####.#.#.###############.#.#####.###.#.#####.#.#.#.#.#.#.#####.#.#.###.#.#.#.#
#.....#...#.................#...........#........m#.....#.#.......#.#.....A.#...#
#################################################################################
")

(def test-input "#########
#b.A.@.a#
#########")

(def test-input2 "########################
#f.D.E.e.C.b.A.@.a.B.c.#
######################.#
#d.....................#
########################")

(def test-input3 "########################
#@..............ac.GI.b#
###d#e#f################
###A#B#C################
###g#h#i################
########################")

(def test-input4 "#################
#i.G..c...e..H.p#
########.########
#j.A..b...f..D.o#
########@########
#k.E..a...g..B.n#
########.########
#l.F..d...h..C.m#
#################")

(def test-input5 "########################
#...............b.C.D.f#
#.######################
#.....@.a.B.c.d.A.e.F.g#
########################")

(defn make-board [in]
  (let [;create a sequence of [x y cell]s
        cells (->> in
                   (clojure.string/split-lines)
                   (map-indexed vector)
                   (mapcat (fn [[y row]] (map-indexed #(vector %1 y %2) row))))]
    (reduce (fn [acc [x y c]]
              (cond->
               acc
                (not= c \#)
                (update :locations conj [[x y] c])

                (Character/isUpperCase c)
                (update :doors conj [c [x y]])

                (Character/isLowerCase c)
                (update :keys conj [c [x y]])

                (= c \@)
                (assoc :start [x y])))
            {;map from [x y] -> character
             :locations {}
             ;map from character -> [x y]
             :doors {}
             :keys  {}}
            cells)))

(defn moves [[x y]]
  [[(dec x) y]
   [(inc x) y]
   [x (dec y)]
   [x (inc y)]])

(defn reachable-keys
  "Find all keys that are reachable with the current board.
   Uses BFS to find the keys. Returns a map from key reachable
   to minimal steps to that key."
  [board]
  (let [queue (conj
               (clojure.lang.PersistentQueue/EMPTY)
               [0 (:start board)])]
    (loop [q       queue
           visited #{}
           result  {}]
      (if (empty? q)
        result
        (let [[steps-done coord] (peek q)
              c (get-in board [:locations coord])]
          (cond
            (or (nil? c)
                (contains? visited coord))
            (recur (pop q)
                   visited
                   result)

            (Character/isLowerCase c)
            (recur (pop q)
                   (conj visited coord)
                   (assoc result c steps-done))

            (not (or (= c \@)
                     (= c \.)))
            (recur (pop q)
                   visited
                   result)

            :else
            (recur (apply conj (pop q) (map (fn [c'] [(inc steps-done) c']) (moves coord)))
                   (conj visited coord)
                   result)))))))

(defn open-door
  "c is a key (lowercase letter). This will update the board, open the door 'C'
   and replaces the door with a 'waypoint' '.' in the locations. Returns an updated
   board."
  [b c]
  (let [c'         (Character/toUpperCase c)
        door-coord (get-in b [:doors c'])
        next-start (get-in b [:keys c])]
    (cond-> b
        ;; pick up the key
      true (update :keys dissoc c)
      true (update :locations assoc next-start \.)
        ;; open the door
      true (update :doors dissoc c')
      (some? door-coord) (update :locations assoc door-coord \.)
      true (assoc :start next-start))))

(defn djikstra'isch [board]
  ;; find all possible keys from board
  ;; update boards and find all possible keys from there
  ;; unitl we picked up all keys.
  ;; always use the smallest total to the keys (cmp dijkstra)
  (let [boards #{[0 board]}]
    (loop [boards  boards
           steps   0
           visited #{}]
      (if (empty? boards)
        -1
        (let [;; use the board that has the least steps first.
              ;; when b has no keys we found the minimal way
              ;; to pick up all the keys
              board'  (apply min-key first boards)
              boards' (disj boards board')
              [steps-to b] board']
          (when (zero? (mod steps 1000))
            (tap> (str "steps done: " steps))
            (tap> (str "boards to look at: " (count boards)))
            (tap> (str "current minimum: " steps-to)))
          (if (empty? (:keys b))
            [steps steps-to]
            (if (contains? visited b)
              (recur boards' (inc steps) visited)
              (recur (apply conj
                            boards'
                            (map (fn [[key extra-steps]]
                                   [(+ extra-steps steps-to)
                                    (open-door b key)])
                                 (reachable-keys b)))
                     (inc steps)
                     (conj visited b)))))))))

(comment
  (make-board input)
  (def tb (make-board input))
  (reachable-keys tb)
  (open-door tb \a)
  (djikstra'isch tb)
  ,)


;; part2:
(defn make-board2 [in]
  (let [cells (->> in
                   (clojure.string/split-lines)
                   (map-indexed vector)
                   (mapcat (fn [[y row]] (map-indexed #(vector %1 y %2) row))))]
    (reduce (fn [acc [x y c]]
              (cond->
               acc
                (not= c \#)
                (update :locations conj [[x y] c])

                (Character/isUpperCase c)
                (update :doors conj [c [x y]])

                (Character/isLowerCase c)
                (update :keys conj [c [x y]])

                (= c \@)
                (update :start conj [x y])))
            {;map from [x y] -> character
             :locations {}
             ;map from character -> [x y]
             :doors {}
             :keys  {}
             :start #{}}
            cells)))

(defn reachable-keys2
  "Find all keys that are reachable with the current board.
   Uses BFS to find the keys. Returns a map from key reachable
   to minimal steps to that key."
  [board start]
  (let [queue (conj
               (clojure.lang.PersistentQueue/EMPTY)
               [0 start])]
    (loop [q       queue
           visited #{}
           result  {}]
      (if (empty? q)
        result
        (let [[steps-done coord] (peek q)
              c (get-in board [:locations coord])]
          (cond
            (or (nil? c)
                (contains? visited coord))
            (recur (pop q)
                   visited
                   result)

            (Character/isLowerCase c)
            (recur (pop q)
                   (conj visited coord)
                   (assoc result c steps-done))

            (not (or (= c \@)
                     (= c \.)))
            (recur (pop q)
                   visited
                   result)

            :else
            (recur (apply conj (pop q) (map (fn [c'] [(inc steps-done) c']) (moves coord)))
                   (conj visited coord)
                   result)))))))

(defn open-door2
  "c is a key (lowercase letter). This will update the board, open the door 'C'
   and replaces the door with a 'waypoint' '.' in the locations. Returns an updated
   board."
  [b c start]
  (let [c'         (Character/toUpperCase c)
        door-coord (get-in b [:doors c'])
        next-start (get-in b [:keys c])
        b' (-> b
               (update :keys dissoc c)
               (update :locations assoc next-start \.)
               (update :doors dissoc c')
               (update :start disj start)
               (update :start conj next-start))]
    (if (some? door-coord)
      (update b' :locations assoc door-coord \.)
      b')))

(defn djikstra'isch2 [board]
  ;; find all possible keys from board
  ;; update boards and find all possible keys from there
  ;; unitl we picked up all keys.
  ;; always use the smallest total to the keys (cmp dijkstra)
  (let [boards #{[0 board]}]
    (loop [boards  boards
           steps   0
           visited #{}]
      (if (empty? boards)
        -1
        (let [;; use the board that has the least steps first.
              ;; when b has no keys we found the minimal way
              ;; to pick up all the keys
              board'  (apply min-key first boards)
              boards' (disj boards board')
              [steps-to b] board']
          (when (zero? (mod steps 1000))
            (tap> (str "steps done: " steps))
            (tap> (str "boards to look at: " (count boards)))
            (tap> (str "current minimum: " steps-to)))
          (if (empty? (:keys b))
            [steps steps-to]
            (if (contains? visited b)
              (recur boards' (inc steps) visited)
              (let [starts (:start b)
                    results (mapcat (fn [s]
                                      (map (fn [[key extra-steps]]
                                             [(+ extra-steps steps-to)
                                              (open-door2 b key s)])
                                           (reachable-keys2 b s))) starts)]
                (recur (apply conj
                              boards'
                              results)
                       (inc steps)
                       (conj visited b))))))))))

(comment
  (def bp2 (make-board2 input-part2))
  (reachable-keys2 bp2 [41 41])
  (open-door2 bp2 \z [41 41])
  (djikstra'isch2 bp2))
